#!/usr/bin/env python3
"""
BAS 29.3.1 Generator
Building Automation System XML Generator for version 29.3.1
Integrates with HD UI framework for XML configuration generation
"""

import xml.etree.ElementTree as ET
from datetime import datetime
from typing import Dict, List, Optional, Any
import json
import os


class BAS291Generator:
    """
    BAS 29.3.1 XML Generator
    Generates Building Automation System configuration XML files
    compliant with BAS standard version 29.3.1
    """
    
    def __init__(self):
        self.version = "29.3.1"
        self.namespace = "http://bas.hd.ui.xml/29.3.1"
        self.schema_location = "http://bas.hd.ui.xml/29.3.1/bas-schema.xsd"
        
    def generate_bas_config(self, config: Dict[str, Any]) -> str:
        """
        Generate BAS 29.3.1 compliant XML configuration
        
        Args:
            config: Configuration dictionary containing BAS settings
            
        Returns:
            XML string formatted for BAS 29.3.1
        """
        root = ET.Element("bas-config")
        root.set("xmlns", self.namespace)
        root.set("xmlns:xsi", "http://www.w3.org/2001/XMLSchema-instance")
        root.set("xsi:schemaLocation", f"{self.namespace} {self.schema_location}")
        root.set("version", self.version)
        root.set("generated", datetime.now().isoformat())
        
        # Add system information
        system_info = ET.SubElement(root, "system-info")
        ET.SubElement(system_info, "name").text = config.get("system_name", "HD-BAS-System")
        ET.SubElement(system_info, "description").text = config.get("description", "Generated by HD UI BAS Generator")
        ET.SubElement(system_info, "version").text = self.version
        
        # Add devices configuration
        if "devices" in config:
            devices = ET.SubElement(root, "devices")
            for device in config["devices"]:
                self._add_device(devices, device)
        
        # Add automation rules
        if "automation" in config:
            automation = ET.SubElement(root, "automation")
            for rule in config["automation"]:
                self._add_automation_rule(automation, rule)
        
        # Add UI configuration
        if "ui_config" in config:
            ui_config = ET.SubElement(root, "ui-configuration")
            self._add_ui_config(ui_config, config["ui_config"])
        
        return self._prettify_xml(root)
    
    def _add_device(self, parent: ET.Element, device: Dict[str, Any]):
        """Add device configuration to XML"""
        device_elem = ET.SubElement(parent, "device")
        device_elem.set("id", device.get("id", ""))
        device_elem.set("type", device.get("type", ""))
        
        ET.SubElement(device_elem, "name").text = device.get("name", "")
        ET.SubElement(device_elem, "location").text = device.get("location", "")
        ET.SubElement(device_elem, "protocol").text = device.get("protocol", "BACnet")
        
        if "properties" in device:
            props = ET.SubElement(device_elem, "properties")
            for key, value in device["properties"].items():
                prop = ET.SubElement(props, "property")
                prop.set("name", key)
                prop.text = str(value)
    
    def _add_automation_rule(self, parent: ET.Element, rule: Dict[str, Any]):
        """Add automation rule to XML"""
        rule_elem = ET.SubElement(parent, "rule")
        rule_elem.set("id", rule.get("id", ""))
        rule_elem.set("enabled", str(rule.get("enabled", True)).lower())
        
        ET.SubElement(rule_elem, "name").text = rule.get("name", "")
        ET.SubElement(rule_elem, "description").text = rule.get("description", "")
        
        if "conditions" in rule:
            conditions = ET.SubElement(rule_elem, "conditions")
            for condition in rule["conditions"]:
                cond = ET.SubElement(conditions, "condition")
                cond.set("device", condition.get("device", ""))
                cond.set("property", condition.get("property", ""))
                cond.set("operator", condition.get("operator", "equals"))
                cond.text = str(condition.get("value", ""))
        
        if "actions" in rule:
            actions = ET.SubElement(rule_elem, "actions")
            for action in rule["actions"]:
                act = ET.SubElement(actions, "action")
                act.set("device", action.get("device", ""))
                act.set("property", action.get("property", ""))
                act.text = str(action.get("value", ""))
    
    def _add_ui_config(self, parent: ET.Element, ui_config: Dict[str, Any]):
        """Add UI configuration to XML"""
        ET.SubElement(parent, "theme").text = ui_config.get("theme", "default")
        ET.SubElement(parent, "language").text = ui_config.get("language", "ko")
        ET.SubElement(parent, "refresh-interval").text = str(ui_config.get("refresh_interval", 30))
        
        if "dashboards" in ui_config:
            dashboards = ET.SubElement(parent, "dashboards")
            for dashboard in ui_config["dashboards"]:
                dash = ET.SubElement(dashboards, "dashboard")
                dash.set("id", dashboard.get("id", ""))
                ET.SubElement(dash, "name").text = dashboard.get("name", "")
                ET.SubElement(dash, "layout").text = dashboard.get("layout", "grid")
    
    def _prettify_xml(self, element: ET.Element) -> str:
        """Return a pretty-printed XML string"""
        from xml.dom import minidom
        rough_string = ET.tostring(element, encoding='unicode')
        reparsed = minidom.parseString(rough_string)
        return reparsed.toprettyxml(indent="  ").split('\n', 1)[1]
    
    def save_config(self, config: Dict[str, Any], filepath: str):
        """Save BAS configuration to XML file"""
        xml_content = self.generate_bas_config(config)
        with open(filepath, 'w', encoding='utf-8') as f:
            f.write(xml_content)
    
    def load_template(self, template_name: str) -> Dict[str, Any]:
        """Load a predefined BAS configuration template"""
        templates = {
            "basic": {
                "system_name": "HD-BAS-Basic",
                "description": "Basic Building Automation System Configuration",
                "devices": [
                    {
                        "id": "hvac-001",
                        "type": "hvac",
                        "name": "Main HVAC Unit",
                        "location": "Building A - Floor 1",
                        "protocol": "BACnet",
                        "properties": {
                            "temperature_setpoint": 22.0,
                            "humidity_setpoint": 50.0,
                            "mode": "auto"
                        }
                    }
                ],
                "automation": [
                    {
                        "id": "energy-save-001",
                        "name": "Energy Saving Rule",
                        "description": "Turn off HVAC when no occupancy",
                        "enabled": True,
                        "conditions": [
                            {"device": "occupancy-001", "property": "presence", "operator": "equals", "value": False}
                        ],
                        "actions": [
                            {"device": "hvac-001", "property": "power", "value": "off"}
                        ]
                    }
                ],
                "ui_config": {
                    "theme": "hd-theme",
                    "language": "ko",
                    "refresh_interval": 30,
                    "dashboards": [
                        {"id": "main", "name": "메인 대시보드", "layout": "grid"}
                    ]
                }
            },
            "advanced": {
                "system_name": "HD-BAS-Advanced",
                "description": "Advanced Building Automation System with Full Integration",
                "devices": [
                    {
                        "id": "hvac-001",
                        "type": "hvac",
                        "name": "Central HVAC System",
                        "location": "Mechanical Room",
                        "protocol": "BACnet",
                        "properties": {
                            "temperature_setpoint": 22.0,
                            "humidity_setpoint": 50.0,
                            "mode": "auto",
                            "schedule_enabled": True
                        }
                    },
                    {
                        "id": "lighting-001",
                        "type": "lighting",
                        "name": "LED Lighting Controller",
                        "location": "Building Wide",
                        "protocol": "DALI",
                        "properties": {
                            "dimming_level": 80,
                            "color_temperature": 4000,
                            "schedule_enabled": True
                        }
                    }
                ],
                "automation": [
                    {
                        "id": "energy-optimization-001",
                        "name": "Energy Optimization",
                        "description": "Comprehensive energy saving automation",
                        "enabled": True,
                        "conditions": [
                            {"device": "occupancy-001", "property": "presence", "operator": "equals", "value": False}
                        ],
                        "actions": [
                            {"device": "hvac-001", "property": "power", "value": "off"},
                            {"device": "lighting-001", "property": "dimming_level", "value": 10}
                        ]
                    }
                ],
                "ui_config": {
                    "theme": "hd-advanced-theme",
                    "language": "ko",
                    "refresh_interval": 15,
                    "dashboards": [
                        {"id": "main", "name": "메인 대시보드", "layout": "grid"},
                        {"id": "energy", "name": "에너지 관리", "layout": "chart"},
                        {"id": "security", "name": "보안 관리", "layout": "list"}
                    ]
                }
            }
        }
        return templates.get(template_name, templates["basic"])


def main():
    """Example usage of BAS 29.3.1 Generator"""
    generator = BAS291Generator()
    
    # Generate basic configuration
    basic_config = generator.load_template("basic")
    xml_output = generator.generate_bas_config(basic_config)
    
    print("BAS 29.3.1 Generator - HD UI XML Integration")
    print("=" * 50)
    print("Generated XML Configuration:")
    print(xml_output)
    
    # Save to file
    output_file = "bas_config_29.3.1.xml"
    generator.save_config(basic_config, output_file)
    print(f"\nConfiguration saved to: {output_file}")


if __name__ == "__main__":
    main()